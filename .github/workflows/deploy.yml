name: Deploy to Linode

on:
  push:
    branches: [master]
  workflow_dispatch:

# Security hardening
permissions:
  contents: read

# Prevent concurrent deployments
concurrency:
  group: "deploy-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Security scanning and quality gates
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate || true

      - name: Lint and type check
        run: |
          npm run lint
          npm run typecheck

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Build application
        run: npm run build

  # Deploy to Linode
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to Linode via Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 96.126.98.14
          username: col
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set up application directory
            sudo mkdir -p /var/www/calmmyself.com
            sudo chown col:col /var/www/calmmyself.com
            cd /var/www/calmmyself.com
            
            # Clone or pull latest code
            if [ -d ".git" ]; then
              git pull origin master
            else
              git clone https://github.com/colinbrauns/calmmyself.com.git .
            fi
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
            
            # Build and start new containers
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Clean up old Docker images
            docker image prune -f
            
            # Wait for health check
            echo "‚è≥ Waiting for application to be healthy..."
            timeout 120 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep "healthy"; do sleep 5; done' || {
              echo "‚ùå Health check failed!"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            }
            
            echo "‚úÖ Docker deployment completed successfully!"
            echo "üê≥ Container status:"
            docker-compose -f docker-compose.prod.yml ps